class Solution {
  public:
    // Function to return a list containing the union of the two arrays.
    vector<int> findUnion(vector<int> &a, vector<int> &b) {
        int n1 = a.size();
        int n2 = b.size();
        int i = 0, j = 0;
        
        vector<int> unionarr;

        while (i < n1 && j < n2) {
            if (a[i] < b[j]) {
                if (unionarr.empty() || unionarr.back() != a[i])
                    unionarr.push_back(a[i]);
                i++;
            }
            else if (a[i] > b[j]) {
                if (unionarr.empty() || unionarr.back() != b[j])
                    unionarr.push_back(b[j]);
                j++;
            }
            else {
                // Both are equal
                if (unionarr.empty() || unionarr.back() != a[i])
                    unionarr.push_back(a[i]);
                i++;
                j++;
            }
        }

        // Process remaining elements in a
        while (i < n1) {
            if (unionarr.empty() || unionarr.back() != a[i])
                unionarr.push_back(a[i]);
            i++;
        }

        // Process remaining elements in b
        while (j < n2) {
            if (unionarr.empty() || unionarr.back() != b[j])
                unionarr.push_back(b[j]);
            j++;
        }

        return unionarr;
    }
};
